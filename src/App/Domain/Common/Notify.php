<?phpnamespace App\Domain\Common;use function App\addLog;use function App\addTaskLog;use App\Auth\Model\Access;use App\Common\CommonDomain;use App\Common\Exception\WrongRequestException;use App\Domain\Project\TaskLog;use App\Model\Project\Level;use App\Model\Project\Project;use App\Model\Project\Task;use App\Model\Project\TaskUser;use App\Model\System\Action;use App\Model\User\User;use function App\nowTime;use function App\pushDingDing;use function App\pushNotice;/** * 项目通知类 * * @author lws */class Notify extends CommonDomain{    private static $Model = null;    public function __construct()    {        if (self::$Model == null) {            self::$Model = new \App\Model\Common\Notify();        }    }    public function NotifyHook($event, $data, $notice_type = 1)    {        //todo 用户可单独设置接收推送消息        switch ($event) {            case 'login':                $this->userLogin($data, $notice_type);                break;            case 'task'://                $param = array();//                $param['memo'] = $memo;//                $param['content'] = $content;//                $param['task_id'] = $task_id;//                $param['user_id'] = $user_id;//                $param['ticket'] = $ticket;//                $param['log_type'] = $log_type;//                $param['create_time'] = nowTime();                $this->taskDynamic($data, $notice_type);                break;            case 'project'://                $param = array();//                $param['content'] = $content;//                $param['project_id'] = $project_id;//                $param['user_id'] = $user_id;//                $param['ticket'] = $ticket;//                $param['create_time'] = nowTime();                $this->projectDynamic($data, $notice_type);                break;        }    }    /**     * @param $data     * @param $notice_type     * @throws \PhalApi\Exception\BadRequestException     */    public function userLogin($data, $notice_type)    {        $notify_type = self::$Model->getNotifyType($notice_type);        $title = $notify_type['title'];        $action = $notify_type['action'];        $push_data = array();        $push_data['notice'] = "{$data['realname']} 上线了";        $push_data['title'] = $title;        pushNotice('all', $push_data, $action, $data['id']);    }    public function taskDynamic($data, $notice_type = 1)    {        $send_notify_action = array('title', 'done', 'again', 'add_executor', 'add', 'add_member');        $task_id = $data['task_id'];        $model_task = new Task();        $model_task_user = new TaskUser();        $model_user = new User();        $task_info = $model_task->get($task_id);        $user_info = $model_user->get($data['user_id'], 'realname');        self::$Model->getNotifyTypeAction($notice_type);        $notify_type = self::$Model->getNotifyType($notice_type);        $title = $notify_type['title'];        $content = $user_info['realname'] . ' ' . $data['content'] . "：{$task_info['name']}";        $to_user_id = $data['to_user_id'];        if ($to_user_id) {            if (in_array($data['log_type'], $send_notify_action)) {                $extra_info = $model_user->get($to_user_id, 'id,phone');                if ($extra_info) {                    $model_project = new Project();                    $project_info = $model_project->get($task_info['project'], 'id,name');//                $content = $user_info['realname'] . ' ' . $data['content'] . "：{$task_info['name']} - {$project_info['name']}";                    $content_dingding = $data['content'] . "：{$task_info['name']} 【{$project_info['name']}】";                }            }        }        $user_ids = array();        if (in_array($data['log_type'], $send_notify_action)) {            $task_user_list = $model_task_user->getListByWhere(array('task_id' => $task_id));            if ($task_user_list) {                foreach ($task_user_list as $task_user) {                    if ($task_user['user_id'] != $data['user_id'] and $task_user['user_id']) {                        $user_ids[] = $task_user['user_id'];                    }                }            }        }        if ($user_ids) {            $this->batchAddNotify($title, $content, $user_ids, $notice_type, 0, $task_info, $task_id);        }        $action = $notify_type['action'];        pushNotice('all', $task_info, $action);    }    /**     * @param $data     * @param int $notice_type     * @throws \PhalApi\Exception\BadRequestException     */    public function projectDynamic($data, $notice_type = 2)    {        $id = $data['project_id'];        $model_project = new Project();        $model_project_user = new \App\Model\Project\User();        $model_user = new User();        $project_info = $model_project->get($id);        $user_info = $model_user->get($data['user_id'], 'realname,account');        self::$Model->getNotifyTypeAction($notice_type);        $notify_type = self::$Model->getNotifyType($notice_type);        $title = $notify_type['title'];        $content = $user_info['realname'] . ' ' . $data['ticket'] . $data['content'] . "【{$project_info['name']}】";        $user_ids = array();        $project_user_list = $model_project_user->getListByWhere(array('project' => $id));        if ($project_user_list) {            foreach ($project_user_list as $project_user) {                $this_user_info = $model_user->getInfo(array('account' => $project_user['account']), 'realname,account,id');                if ($project_user['account'] != $user_info['account'] and $project_user['account']) {                    $user_ids[] = $this_user_info['id'];                }            }        }        if ($user_ids) {            $this->batchAddNotify($title, $content, $user_ids, $notice_type, 0, $project_info, $id);        }        $action = $notify_type['action'];        pushNotice('all', $project_info, $action);    }    /**     * @param $title     * @param $content     * @param array|int $user_ids     * @param int $type     * @param int $send_time     * @param array $send_data     * @param int $action_id     * @throws \PhalApi\Exception\BadRequestException     */    public function batchAddNotify($title, $content, $user_ids = array(), $type = 0, $send_time = 0, $send_data = array(), $action_id = 0)    {        if ($user_ids) {            foreach ($user_ids as $user_id) {                $this->addNotify($title, $content, $user_id, $type, $send_time, $send_data, $action_id);            }        }    }    /**     * @param $title     * @param $content     * @param int $user_id     * @param int $type     * @param int $send_time     * @param array $send_data     * @param int $action_id     * @return boolean|int     * @throws \PhalApi\Exception\BadRequestException     */    public function addNotify($title, $content, $user_id = 0, $type = 0, $send_time = 0, $send_data = array(), $action_id = 0)    {        $param = array();        $param['title'] = $title;        $param['content'] = $content;        $param['to_user_id'] = $user_id;        $param['type'] = $type;        $param['action_id'] = $action_id;        $param['send_data'] = json_encode($send_data);        $param['create_time'] = nowTime();        $param['send_time'] = $send_time == 0 ? nowTime() : $send_time;        $notify_info = self::$Model->getInfo(array('to_user_id' => $user_id, 'type' => $type, 'action_id' => $action_id), 'id');        if ($notify_info) {            self::$Model->delete($notify_info['id']);        }        $insert_id = self::$Model->insert($param);        pushNotice($user_id, $content); //推送客户端通知        return $insert_id;    }    /**     * @param $param     * @return array|boolean     * @throws \PhalApi\Exception\BadRequestException     */    public function getList($param)    {        if (!is_array($param)) {            $param = get_object_vars($param);        }        if (isset($param['keyWord'])) {            $param['where']["title LIKE ? or content LIKE ? "] = array("%" . $param['keyWord'] . "%", "%" . $param['keyWord'] . "%",);        }        if (isset($param["is_read"]) and $param["is_read"] != -1) {            $param['where']["is_read"] = $param['is_read'];        }        if (isset($param['to_user_id'])) {            if ($param['to_user_id']) {                $param['where']["to_user_id"] = $param['to_user_id'];            } else {                $current_user = \App\getCurrentUser();                if (!$current_user) {                    return false;                }                $param['to_user_id'] = $current_user['id'];                $param['where']["to_user_id"] = $param['to_user_id'];            }        }        $list = self::$Model->getList($param);        if ($list['list']) {            foreach ($list['list'] as $key => &$item) {                if (isset($param["notice_type"]) and $param["notice_type"]) {                    if (!in_array($item['type'], $param["notice_type"])) {                        array_splice($list['list'], $key, 1);                        $list['count']--;                    }                }                $item['notify_type_title'] = self::$Model->getNotifyTypeTitle($item['type']);            }            unset($item);        }        return $list;    }    /**     * @param $param     * @return array|bool     * @throws \PhalApi\Exception\BadRequestException     */    public function getListForUser($param)    {        if (!is_array($param)) {            $param = get_object_vars($param);        }        if (isset($param['keyWord'])) {            $param['where']["title LIKE ? or content LIKE ? "] = array("%" . $param['keyWord'] . "%", "%" . $param['keyWord'] . "%",);        }        if (isset($param['to_user_id'])) {            if ($param['to_user_id']) {                $param['where']["to_user_id"] = $param['to_user_id'];            } else {                $current_user = \App\getCurrentUser();                if (!$current_user) {                    return false;                }                $param['to_user_id'] = $current_user['id'];                $param['where']["to_user_id"] = $param['to_user_id'];            }        }        $param['where']["finally_send_time is null and send_time <= ? "] = array(nowTime());        $list = self::$Model->getList($param);        if ($list['list']) {            foreach ($list['list'] as $key => &$item) {                if (isset($param["notice_type"]) and $param["notice_type"]) {                    if (!in_array($item['type'], $param["notice_type"])) {                        array_splice($list['list'], $key, 1);                        $list['count']--;                    }                }                $item['notify_type_title'] = self::$Model->getNotifyTypeTitle($item['type']);//                self::$Model->update($item['id'], array('finally_send_time' => nowTime()));            }            unset($item);        }        return $list;    }    public function getInfo($where, $field = '*')    {        return self::$Model->getInfo($where, $field);    }    public function setFinallySendTime($ids)    {        if (is_object($ids)) {            $ids = get_object_vars($ids);        }        self::$Model->updateByWhere(array('id' => $ids), array('finally_send_time' => nowTime()));    }    public function getNotifyTypeList()    {        return self::$Model->getNotifyTypeList();    }    /** 删除通知     * @param array $ids id列表 如1,2,3     * @return int     */    public function delNotify($ids)    {        $result = self::$Model->delItems($ids);        if ($result) {            $ids = json_encode($ids);            addLog("删除项目通知，编号：$ids");        }        return $result == true ? 0 : 1;    }    public function editProjectNotify($id, $data)    {        $result = self::$Model->update($id, $data);        if ($result === false) {            throw new WrongRequestException('保存失败', 6);        }        addLog('修改项目通知，通知ID：' . $id);    }    public function batchTicketRead($ids)    {        if (!$ids) {            $current_user = \App\getCurrentUser();            if ($current_user) {                $result = self::$Model->updateByWhere(array('to_user_id' => $current_user['id'], 'is_read' => 0), array('is_read' => 1, 'read_time' => nowTime()));            }        } else {            $result = self::$Model->updateByIds($ids, array('is_read' => 1, 'read_time' => nowTime()));        }        if ($result === false) {            throw new WrongRequestException('操作失败', 1);        }    }    public function ticketRead($id)    {        $result = self::$Model->update($id, array('is_read' => 1, 'read_time' => nowTime()));        if ($result === false) {            throw new WrongRequestException('操作失败', 1);        }    }    public function importUser()    {        $sql = "SELECT * FROM pms_user WHERE 1";        $lists = \PhalApi\DI()->notorm->notTable->queryRows($sql);        $domain_user = new User();        foreach ($lists as $user) {            $data = array();            $data['pms_id'] = $user['id'];            $data['user_name'] = $user['account'];            $data['realname'] = $user['realname'];            $data['email'] = $user['email'];            $data['avatar'] = 'http://static.vilson.xyz/20171110154948_53004a2d25f8c5ec929f2104950d1966';            $data['qq'] = $user['qq'];            $data['mobile'] = $user['phone'];            $data['password'] = 123456;            $data['state'] = 1;            $data['level_id'] = 1;            $data['position_id'] = 3;            $domain_user->addUser($data);        }        var_dump($lists);        die;    }    public function clearTask()    {        $sql = "SELECT *,tt.id AS tt_id FROM pms_task pt JOIN tbl_task AS tt ON pt.id = tt.pms_id AND (pt.deleted = '1' OR pt.`status` = 'closed')";        $task_list = \PhalApi\DI()->notorm->notTable->queryRows($sql);        if ($task_list) {            foreach ($task_list as $item) {                $task_id = $item['tt_id'];                $this->delTask($task_id);            }        }    }    public function importProject()    {        $sql = "SELECT max(pms_id) AS max_id FROM tbl_project WHERE 1";        $max = \PhalApi\DI()->notorm->notTable->queryRows($sql);        $max_id = $max[0]['max_id'];//        $sql = "select * from pms_project where `deleted` = '0' and id = 996  ";        $sql = "SELECT * FROM pms_project WHERE `deleted` = '0' and id >= {$max_id}";        $lists = \PhalApi\DI()->notorm->notTable->queryRows($sql);        $domain_project = new Project();        $model_project = new \App\Model\Project\Project();        $model_task = new Task();        $model_task_user = new TaskUser();        $model_user = new \App\Model\User\User();        $model_project_user = new \App\Model\Project\User();        $current_user = getCurrentUser();        foreach ($lists as $item) {            $data = array();            $data['pms_id'] = $item['id'];            $data['name'] = $item['name'];            $data['code'] = $item['code'] == null ? '' : $item['code'];            $data['project_desc'] = $item['desc'];            $data['begin_time'] = $item['begin'];            $data['end_time'] = $item['end'];            $data['level_id'] = 1;            $status = $model_project->getProjectStateByCode($item['status']);            $data['state'] = $status['key'];            $project_info = $model_project->getInfo(array('name' => $data['name']), 'id');//            $project_info = $model_project->getInfo(array('pms_id'=>$data['pms_id']),'id');            $old_project_id = $item['id'];            if (!$project_info) {                $sql = "select * from pms_action where `project` = {$old_project_id} and `objectType` = 'project' and `action` = 'opened'";                $team = \PhalApi\DI()->notorm->notTable->queryRows($sql);                $business_name = $team[0]['actor'];                $business_id = $model_user->getInfo(array('user_name' => $business_name), 'id');                $project_id = $domain_project->addProject($data, $current_user['id']);                if ($business_id) {                    $model_project->update($project_id, array('business_id' => $business_id));                }            } else {                $project_id = $project_info['id'];                $model_project->update($project_id, array('pms_id' => $data['pms_id']));            }            //插入项目成员            $sql = "select * from pms_action where project = {$project_id} and objectType = 'task' group by actor";            $action_list = \PhalApi\DI()->notorm->notTable->queryRows($sql);            foreach ($action_list as $action) {                $action_user_name = $action['actor'];                $user_info = $model_user->getInfo(array('user_name' => $action_user_name), 'id');                $project_user_info = $model_project_user->getInfo(array('user_id' => $user_info['id'], 'project_id' => $project_id), 'id');                if ($user_info and !$project_user_info) {                    $project_user_data = array();                    $project_user_data['user_id'] = $user_info['id'];                    $project_user_data['project_id'] = $project_id;                    $project_user_data['create_time'] = nowTime();                    $model_project_user->insert($project_user_data);                }            }            $sql = "select * from pms_task where `project` = {$item['id']} and deleted = '0' and `status` != 'closed' ";            $task_list = \PhalApi\DI()->notorm->notTable->queryRows($sql);            if ($task_list) {                foreach ($task_list as $task) {                    //原信息                    $pms_task_id = $task['id'];                    $task_title = $task['name']; //任务标题                    $sql = "select * from pms_action where project = {$project_id} and objectType = 'task' and objectID = {$pms_task_id} and `action`='opened' order by id asc limit 1";                    $create_info = \PhalApi\DI()->notorm->notTable->queryRows($sql);                    $create_info = $create_info[0];                    $create_user = $model_user->getInfo(array('user_name' => $create_info['actor']), 'id'); //任务创建人                    $sql = "select * from pms_action where project = {$project_id} and objectType = 'task' and objectID = {$pms_task_id} and `action`='assigned' order by id desc limit 1";                    $executor_info = \PhalApi\DI()->notorm->notTable->queryRows($sql);                    $executor_info = $executor_info[0];                    if (!$executor_info) {                        $executor_info = $create_user;                    }                    $execute_user = $model_user->getInfo(array('user_name' => $executor_info['actor']), 'id'); //任务执行人                    $sql = "select * from pms_action where project = {$project_id} and objectType = 'task' and objectID = {$pms_task_id} and `action`='finished' order by id desc limit 1";                    $finished_info = \PhalApi\DI()->notorm->notTable->queryRows($sql);                    $finished_info = $finished_info[0];                    $create_time = $create_info['date']; //任务创建时间                    $task_type = 1;  //任务类型                    $task_state = $finished_info ? 1 : 0;  //任务完成状态                    $has_task_info = $model_task->getInfo(array('title' => $task_title, 'project_id' => $project_id));                    if ($has_task_info) {                        $model_task->update($has_task_info['id'], array('pms_id' => $pms_task_id));                        $task_id = $has_task_info['id'];                    } else {                        //新信息                        $task_data = array();                        $task_data['title'] = $task_title;                        $task_data['create_time'] = $create_time ? $create_time : nowTime();                        $task_data['task_type'] = $task_type;                        $task_data['task_state'] = $task_state;                        $task_data['create_user_id'] = $create_user['id'];                        $task_data['project_id'] = $project_id;                        $task_data['pms_id'] = $pms_task_id;                        $task_id = $model_task->insert($task_data);                    }                    $sql = "select * from pms_action where project = {$old_project_id} and objectType = 'task' and objectID = {$pms_task_id} group by actor";                    $task_user_list = \PhalApi\DI()->notorm->notTable->queryRows($sql);                    if ($task_user_list) {                        foreach ($task_user_list as $task_user) {                            if (!$task_user) {                                continue;                            }                            $in_user = $model_user->getInfo(array('user_name' => $task_user['actor']), 'id');                            if (!$in_user) {                                continue;                            }                            $task_user = $model_task_user->getInfo(array('task_id' => $task_id, 'user_id' => $in_user['id']), 'id');                            if (!$task_user) {                                $insert_task_user_data = array();                                $insert_task_user_data['task_id'] = $task_id;                                $insert_task_user_data['user_id'] = $in_user['id'];                                $insert_task_user_data['is_executor'] = $execute_user['id'] == $in_user['id'] ? 1 : 0;                                $insert_task_user_data['create_time'] = $create_time ? $create_time : nowTime();                                $model_task_user->insert($insert_task_user_data);                            }                        }                    }                }            }        }    }    public function fixTaskUser()    {        $model_task_user = new TaskUser();        $model_user = new User();        $model_task = new Task();        $task_list = $model_task->getListByWhere(array('deleted' => '"0"'), 'assignedTo,assignedDate,id');        if ($task_list) {            foreach ($task_list as $task) {                $assignedTo = $task['assignedTo'];                $assignedDate = $task['assignedDate'];                if (!$assignedTo) {                    continue;                }                $executor_user = $model_user->getInfo(array('account' => $assignedTo), 'id');                if (!$executor_user) {                    continue;                }                $task_user_data = array();                $task_user_data['task_id'] = $task['id'];                $task_user_data['is_executor'] = 1;                $task_user_data['user_id'] = $executor_user['id'];                $task_user_data['create_time'] = $assignedDate;                $model_task_user->insert($task_user_data);            }        }    }    public function fixedProjectUser()    {        $sql = "SELECT t.project AS project_id,u.account AS account FROM pms_task AS t JOIN pms_task_user AS tu ON t.id = tu.task_id JOIN pms_user AS u ON tu.user_id = u.id GROUP BY tu.user_id ORDER BY t.project ASC";        $list = \PhalApi\DI()->notorm->notTable->queryRows($sql);        if ($list) {        }    }    public function fixedProjectBusiness()    {        $model_project = new Project();        $model_user = new User();        $model_action = new Action();        $action_list = $model_action->getListByWhere(array('is_check' => 0, 'action = ? ' => array('opened'), 'objectType' => 'project'));        if ($action_list) {            foreach ($action_list as $action) {                $action_type = $action['action'];                $projet_id = $action['objectID'];                $actor = $action['actor'];                $comment = $action['comment'];                if ($actor) {                    $user_info = $model_user->getInfo(array('account' => $actor), 'id');                    $model_project->update($projet_id, array('business_id' => $user_info['id']));                }                $model_action->update($action['id'], array('is_check' => 1));            }        }    }    public function fixedUserAuth()    {        $model_user = new User();        $access = new Access();        $user_list = $model_user->getListByWhere(array());        if ($user_list) {            foreach ($user_list as $user) {                if ($user['id'] != '26' and $user['id'] != '94') {                    $access_data = array();                    $access_data['uid'] = $user['id'];                    $access_data['group_id'] = 1;                    $access->insert($access_data);                    $access_data['group_id'] = 3;                    $access->insert($access_data);                }            }        }    }    public function fixProjectLevel()    {        $model_task = new Task();        $model_project = new Project();        $model_project_level = new Level();        $task_list = $model_task->getListByWhere(array('id > ?' => 8617, 'name like ? ' => "%https://jinbo-e359f7af7:8443/svn%", 'is_check' => 0), 'project,name,id');        if ($task_list) {            foreach ($task_list as $task) {                $name = explode('：', $task['name']);                $level_name = $name[0];                $level_info = $model_project_level->getInfo(array('level_name' => $level_name), 'id');                if ($level_info) {                    $model_project->update($task['project'], array('level_id' => $level_info['id']));                    $model_task->update($task['id'], array('is_check' => 1));                }            }        }    }    public function pushTaskRemind()    {        $time_begin = microtime(true);        $model_task = new Task();        $model_project = new Project();        $domain_task = new \App\Domain\Project\Task();        $now = nowTime();        $task_list = $model_task->getListByWhere(array('remind_time <= ?' => $now, 'is_pushed' => 0), '*');        if ($task_list) {            foreach ($task_list as $task) {                $remind_time = $task['remind_time'];                $cha_second = strtotime($now) - strtotime($remind_time);                $executor = $domain_task->getTaskExecutorUser($task['id']);                if ($executor) {                    $project_info = $model_project->get($task['project']);                    pushNotice($executor['id'], array('task_id' => $task['id'], 'project_name' => $project_info['name'], 'project_id' => $project_info['id'], 'title' => '任务提醒', 'notice' => $task['name']), 'task_remind_notice');                }                $model_task->update($task['id'], array('is_pushed' => 1));            }        }        $time_end = microtime(true);        echo 'finished at ' . nowTime() . ',took ' . number_format(($time_end - $time_begin) * 1000, 2) . ' ms';        die;    }    /**     * 同步pms任务执行人和任务完成状态     */    public function fixedExecutor()    {        $time_begin = microtime(true);        $model_user = new User();        $model_action = new Action();        $model_task_user = new TaskUser();        $model_task = new Task();        $domain_task = new \App\Domain\Project\Task();        $action_list = $model_action->getListByWhere(array('is_check' => 0, 'action = ? or action = ? or action = ? or action = ? or action = ? or action = ?' => array('assigned', 'finished', 'opened', 'paused', 'canceled', 'closed'), 'objectType' => 'task'), '*', 'id asc');        if ($action_list) {            foreach ($action_list as $action) {                $action_type = $action['action'];                $task_id = $action['objectID'];                $actor = $action['actor'];                $comment = $action['comment'];                $tags = explode(',', $comment);                $tag_list = array();                $task_info = $model_task->get($task_id);                $task_tag_list = json_decode($task_info['task_tag']);                if (!$task_tag_list) {                    $task_tag_list = array();                }                if ($tags) {                    foreach ($tags as $item) {                        $tag = $domain_task->getTaskTagByName($item);                        if ($tag) {                            if (!in_array($tag['key'], $task_tag_list)) {                                $tag_list[] = $tag['key'];                            }                        }                    }                }                $task_tag_list = array_merge($task_tag_list, $tag_list);                $model_task->update($task_id, array('task_tag' => json_encode($task_tag_list)));                $is_synchronize = true;                $date = $action['date'];                //todo 创建者也加入任务成员                $actor_info = $model_user->getInfo(array('account' => $actor), 'id,realname');                $log_data['task_id'] = $task_id;                if ($action_type == 'assigned') {                    $assignedTo = $action['extra'];                    if (!$assignedTo) {                        continue;                    }                    $user_info = $model_user->getInfo(array('account' => $assignedTo), 'id,realname');                    $task_user_info = $model_task_user->getInfo(array('user_id' => $user_info['id'], 'task_id' => $task_id));                    $log_data['task_id'] = $task_id;                    if (!$task_user_info) {                        $task_user_data = array('user_id' => $user_info['id'], 'task_id' => $task_id, 'is_executor' => 1, 'create_time' => nowTime());                        $model_task_user->insert($task_user_data);                        $log_data['content'] = "认领了任务";                    } else {                        $model_task_user->updateByWhere(array('task_id' => $task_id), array('is_executor' => 0));                        $model_task_user->updateByWhere(array('id' => $task_user_info['id']), array('is_executor' => 1));                        if ($user_info['id'] == $actor_info['id']) {                            $log_data['content'] = "认领了任务";                        } else {                            $log_data['content'] = "指派给了 {$user_info['realname']}";                        }                    }                    $log_data['log_type'] = "add_executor";                    addTaskLog($log_data['content'], $log_data['task_id'], $log_data['log_type'], $comment, '', $actor_info['id'], $user_info['id'], $is_synchronize);                } elseif ($action_type == 'opened') {                    $user_info = $model_user->getInfo(array('account' => $actor), 'id,realname');                    $assignedTo = $task_info['assignedTo'];                    $has_executor_user_info = $model_task_user->getInfo(array('is_executor' => 1, 'task_id' => $task_id));                    $task_user_info = $model_task_user->getInfo(array('user_id' => $user_info['id'], 'task_id' => $task_id));                    if (!$has_executor_user_info) {                        if (!$task_user_info) {                            $task_user_data = array('user_id' => $user_info['id'], 'task_id' => $task_id, 'is_executor' => 1, 'create_time' => nowTime());                            $model_task_user->insert($task_user_data);                            $log_data['content'] = "创建了任务";                            $log_data['log_type'] = "add";                            addTaskLog($log_data['content'], $log_data['task_id'], $log_data['log_type'], $comment, '', $user_info['id'], 0, $is_synchronize);                        } else {                            $model_task_user->updateByWhere(array('id' => $task_user_info['id']), array('is_executor' => 1));                            $log_data['content'] = "认领了任务";                            $log_data['log_type'] = "add_executor";                            addTaskLog($log_data['content'], $log_data['task_id'], $log_data['log_type'], $comment, '', $actor_info['id'], 0, $is_synchronize);                        }                        if ($assignedTo) {                            $assigned_user_info = $model_user->getInfo(array('account' => $assignedTo), 'id,realname');                            if ($assigned_user_info['id'] != $actor_info['id']) {                                $model_task_user->updateByWhere(array('task_id' => $task_id), array('is_executor' => 0));                                $task_user_data = array('user_id' => $assigned_user_info['id'], 'task_id' => $task_id, 'is_executor' => 1, 'create_time' => nowTime());                                $model_task_user->insert($task_user_data);                                $log_data['content'] = "指派给了 {$assigned_user_info['realname']}";                                $log_data['log_type'] = "add_executor";                                addTaskLog($log_data['content'], $log_data['task_id'], $log_data['log_type'], $comment, '', $actor_info['id'], $assigned_user_info['id'], $is_synchronize);                            }                        }                    } else {                        if (!$task_user_info) {                            $task_user_data = array('user_id' => $user_info['id'], 'task_id' => $task_id, 'is_executor' => 0, 'create_time' => nowTime());                            $model_task_user->insert($task_user_data);                            $log_data['content'] = "加入了任务";                            $log_data['log_type'] = "add_member";                            addTaskLog($log_data['content'], $log_data['task_id'], $log_data['log_type'], $comment, '', $user_info['id'], 0, $is_synchronize);                        }                    }                } elseif ($action_type == 'finished') {                    $has_executor_user_info = $model_task_user->getInfo(array('is_executor' => 1, 'task_id' => $task_id));                    $user_info = $model_user->getInfo(array('account' => $actor), 'id,realname');                    $task_actor_info = $model_task_user->getInfo(array('user_id' => $user_info['id'], 'task_id' => $task_id));                    if (!$task_actor_info) {                        $task_user_data = array('user_id' => $user_info['id'], 'task_id' => $task_id, 'is_executor' => 0, 'create_time' => nowTime());                        $model_task_user->insert($task_user_data);                        $log_data['content'] = "加入了任务";                        $log_data['log_type'] = "add_member";                        addTaskLog($log_data['content'], $log_data['task_id'], $log_data['log_type'], $comment, '', $user_info['id'], 0, $is_synchronize);                    }                    if (!$has_executor_user_info) {                        $model_task_user->updateByWhere(array('id' => $task_actor_info['id']), array('is_executor' => 1));                    }                    $log_data['content'] = "完成了任务";                    $log_data['log_type'] = "done";                    $model_task->updateByWhere(array('id' => $task_id), array('task_state' => 1));                    addTaskLog($log_data['content'], $log_data['task_id'], $log_data['log_type'], $comment, '', $user_info['id'], 0, $is_synchronize);                } elseif ($action_type == 'paused' or $action_type == 'canceled' or $action_type == 'closed') {                    $has_executor_user_info = $model_task_user->getInfo(array('is_executor' => 1, 'task_id' => $task_id));                    $user_info = $model_user->getInfo(array('account' => $actor), 'id,realname');                    $task_actor_info = $model_task_user->getInfo(array('user_id' => $user_info['id'], 'task_id' => $task_id));                    if (!$task_actor_info) {                        $task_user_data = array('user_id' => $user_info['id'], 'task_id' => $task_id, 'is_executor' => 0, 'create_time' => nowTime());                        $model_task_user->insert($task_user_data);                        $log_data['content'] = "加入了任务";                        $log_data['log_type'] = "add_member";                        addTaskLog($log_data['content'], $log_data['task_id'], $log_data['log_type'], $comment, '', $user_info['id'], 0, $is_synchronize);                    }                    if (!$has_executor_user_info) {                        $model_task_user->updateByWhere(array('id' => $task_actor_info['id']), array('is_executor' => 1));                    }                    $domain_task_log = new TaskLog();                    $task_execute_state = $domain_task->getTaskExecuteStateByCode($action_type);                    $log_data_tmp = $domain_task_log->getLogContent(array('execute_state' => $task_execute_state['key']));                    $log_data['content'] = $log_data_tmp['content'];                    $log_data['log_type'] = $log_data_tmp['log_type'];                    $model_task->updateByWhere(array('id' => $task_id), array('execute_state' => $task_execute_state['key']));                    addTaskLog($log_data['content'], $log_data['task_id'], $log_data['log_type'], $comment, '', $user_info['id'], 0, $is_synchronize);                }                $model_action->update($action['id'], array('is_check' => 1));            }        }        $this->fixedProjectBusiness();        $this->fixProjectLevel();        $time_end = microtime(true);        echo 'finished at ' . nowTime() . ',took ' . number_format(($time_end - $time_begin) * 1000, 2) . ' ms';        die;    }    public function fixedExecutor2()    {//        $pid = $puser['id'];//        $son_user = "pid = $pid and pos = 1";//        while ($son_user) {//            $pid = $son_user['id'];//            $son_user = "pid = $pid and pos = 1";//        }        $model_user = new User();        $model_task = new Task();        $model_task_user = new TaskUser();        $task_user_list = $model_task_user->getListByWhere(array('is_executor' => 0));        if ($task_user_list) {            foreach ($task_user_list as $task_user) {                $executor = $model_task_user->getInfo(array('task_id' => $task_user['task_id'], 'is_executor' => 1));                if (!$executor) {                    $result = $model_task_user->updateByWhere(array('id' => $task_user['id']), array('is_executor' => 1));                }            }        }    }    public function updateSchedule()    {        $model_task = new Task();        $model_project = new Project();        $project_list = $model_project->getListByWhere();        if ($project_list) {            foreach ($project_list as $project) {                $all_task = $model_task->getListByWhere(array('project' => $project['id']), 'id');                $all_task = count($all_task);                $done_task = $model_task->getListByWhere(array('project' => $project['id'], 'task_state' => 1), 'id');                $done_task = count($done_task);                if ($all_task) { //自动计算项目进度                    $schedule = intval($done_task / $all_task * 100);                    $model_project->update($project['id'], array('schedule' => $schedule));                }            }        }    }    public function connectTask()    {        $project_id = 993;        $pms_id = 1017;        $model_task = new Task();        $model_user = new User();        $domain_task = new \App\Domain\Project\Task();        $task_list = $model_task->getListByWhere(array('project_id' => $project_id));        if ($task_list) {            foreach ($task_list as $task) {                $task_name = $task['title'];                $sql = "SELECT * FROM pms_task where project = {$pms_id} and `name` = '{$task_name}'";                $old_task = \PhalApi\DI()->notorm->notTable->queryRows($sql);                if ($old_task) {                    continue;                }                $new_data = array();                $new_data['project'] = $pms_id;                $new_data['name'] = $task['title'];                $new_data['type'] = 'misc';                $new_data['pri'] = 1;                $new_data['status'] = $task['task_state'] == 0 ? 'doing' : 'done';                $new_data['desc'] = addslashes($task['content']);                $new_data['task_type'] = 6;                $new_data['openedDate'] = $task['create_time'] == null ? nowTime() : $task['create_time'];                $create_user = $model_user->get($task['create_user_id']);                if ($create_user) {                    $new_data['openedBy'] = $create_user['user_name'];                }                $executor = $domain_task->getTaskExecutorUser($task['id']);                if ($executor) {                    $new_data['assignedTo'] = $executor['user_name'];                    $new_data['assignedDate'] = $executor['executor_time'] == null ? nowTime() : $executor['executor_time'];                }                $this->formatSql('pms_task', $new_data);            }        }    }    public function formatSql($table_name, $params)    {        if ($params) {            $sql = "insert into {$table_name} (";            $length = count($params) - 1;            $i = 0;            foreach ($params as $key => $item) {                if ($i < $length) {                    $sql .= "`{$key}`,";                } else {                    $sql .= "`{$key}`)";                }                $i++;            }            $sql .= " values (";            $i = 0;            foreach ($params as $key => $item) {                if ($i < $length) {                    $sql .= "'{$item}',";                } else {                    $sql .= "'{$item}')";                }                $i++;            }            ob_clean();            \PhalApi\DI()->notorm->notTable->query($sql, $params);        }    }    /**     * 推送任务和项目变动     * @throws \PhalApi\Exception\BadRequestException     */    public function pushNotify()    {//        pushNotice(26,array('project_id'=>111),'action_synchronize');        $time_begin = microtime(true);        $model_action = new Action();        $model_task = new Task();        $domain_project = new \App\Domain\Project\Project();        $action_list = $model_action->getListByWhere(array('pushed' => 0));        $push_uids = array();        if ($action_list) {            foreach ($action_list as $action) {                $action_type = $action['objectType'];                $action_id = $action['objectID'];                if ($action_type == 'task') {                    $task_info = $model_task->get($action_id, 'project');                    $project_id = $task_info['project'];                    $user_list = $domain_project->getProjectUserList(array('project_id' => $project_id));                } elseif ($action_type == 'project') {                    $project_id = $action_id;                    $user_list = $domain_project->getProjectUserList(array('project_id' => $action_id));                }                if ($user_list['list']) {                    foreach ($user_list['list'] as $index => $item) {                        if (!in_array($item['id'], $push_uids)) {                            $push_uids[] = $item['id'];                        }                    }                }                $model_action->update($action['id'], array('pushed' => 1));            }        }        if ($push_uids) {            foreach ($push_uids as $uid) {                pushNotice($uid, array('project_id' => $project_id), 'action_synchronize');            }        }        $time_end = microtime(true);        echo 'finished at ' . nowTime() . ',took ' . number_format(($time_end - $time_begin) * 1000, 2) . ' ms';        die;    }    public function doSomeThing()    {        //        pushNotice();die;        ini_set('max_execution_time', '0');        set_time_limit(0);        ignore_user_abort(true);//        $this->fixTaskUser();//        $this->fixedProjectBussniess();//        $this->fixedUserAuth();//        $this->updateSchedule();        $this->fixedExecutor();//        $this->connectTask();//        $this->clearTask();//        $this->importUser();//        $this->importProject();        echo 'finishied';        die;    }}