<?phpnamespace App\Domain\Project;use function App\addTaskLog;use App\Common\CommonDomain;use App\Common\Exception\WrongRequestException;use function App\downloadFile;use function App\getCurrentUser;use App\Model\User\User;use function App\nowTime;use ZipArchive;/** * 任务文件类 * * @author lws */class File extends CommonDomain{    private static $Model = null;    public function __construct()    {        if (self::$Model == null) {            self::$Model = new \App\Model\Project\File();        }    }    public function getInfo($where,$field = '*')    {        return self::$Model->getInfo($where,$field);    }    /**获取文件列表     * @param $param     * @return array 数据对象     */    public function getList($param)    {        if (!is_array($param)) {            $param = get_object_vars($param);        }        if (isset($param['keyWord'])) {            $param['where']["title LIKE ? or extension = ? "] = array("%" . $param['keyWord'] . "%", $param['keyWord']);        }        $param['where']['objectID'] = $param['objectID'];        $list = self::$Model->getList($param);        if ($list['list']) {            $model_user = new User();            foreach ($list['list'] as &$item) {                if ($item) {                    $user = $model_user->getInfo(array('account'=>$item['addedBy']));                    $item['user_info'] = $user;                }            }            unset($item);        }        return $list;    }    public function uploadTaskFile($task_id, $title, $file_name, $file_type, $file_size, $file_ext, $file_url)    {        $user_info = getCurrentUser();        $data = array();        $data['objectID'] = $task_id;        $data['objectType'] = 'task';        $data['pathname'] = $file_name;        $data['title'] = $title;        $data['file_type'] = $file_type;        $data['size'] = $file_size;        $data['extension'] = $file_ext;        $data['extra'] = '';        $data['file_url'] = $file_url;        $data['addedDate'] = nowTime();        $data['addedBy'] = $user_info['account'];        $data['from_new_system'] = 1;        $insert = self::$Model->insert($data);        if ($insert) {            $log_data = array();            $log_data['task_id'] = $task_id;            $log_data['log_type'] = 'upload';            $log_data['content'] = "关联了文件 " . $title;            addTaskLog($log_data['content'], $log_data['task_id'], $log_data['log_type']);            return $file_url;        }    }    public function delTaskFile($file_id)    {        $task_file_info = self::$Model->get($file_id);        if ($task_file_info and $task_file_info['from_new_system']) {            $path = $this->getTaskFilePath($task_file_info['objectID'], $task_file_info['pathname']);            unlink($path);            $result = self::$Model->delete($file_id);            if (!$result) {                throw new WrongRequestException('删除失败', 1);            }        } else {            throw new WrongRequestException('文件不存在', 3);        }    }    public function downloadTaskFile($file_id)    {        $file_info = self::$Model->get($file_id);        if ($file_info) {            if ($file_info['from_new_system']) {                if (USE_QINIU) {                    $path = $file_info['file_url'];                } else {                    $path = $this->getTaskFilePath($file_info['objectID'], $file_info['pathname']);                }                downloadFile($file_info, $path,true);            }else{                $path = "http://192.168.1.254/file-download-{$file_id}-left.html";//                echo "<script>location.href = {$path}</script>";die;                header("Location:".$path);//                downloadFile($file_info, $path);            }        }    }    public function batchDownloadTaskFile($file_ids)    {        $file_list = array();        $zip_path = "file/download/bak.zip";        if ($file_ids) {            foreach ($file_ids as $file_id) {                $file_info = self::$Model->get($file_id);                $file_list[] = $file_info;            }        }        $filename = BASE_UPLOAD_PATH . CB . $zip_path;        if (!file_exists($filename)) {            if (1) {                //重新生成文件                $zip = new ZipArchive();//使用本类，linux需开启zlib，windows需取消php_zip.dll前的注释                if ($zip->open($filename, ZIPARCHIVE::CREATE) !== TRUE) {                    exit('无法打开文件，或者文件创建失败');                }                $model_task = new \App\Model\Project\Task();                foreach ($file_list as $file_info) {                    $task_info = $model_task->get($file_info['task_id']);                    $project_id = $task_info['project_id'];                    $path = BASE_UPLOAD_PATH . CB . "file/project/{$project_id}/{$file_info['task_id']}";                    $path =  $path . CB . $file_info['file_name'];                    if (file_exists($path)) {                        $result = $zip->addFile($path, basename($path));//第二个参数是放在压缩包中的文件名称，如果文件可能会有重复，就需要注意一下                    }                }                $zip->close();//关闭            }            if (!file_exists($filename)) {                exit("无法找到文件"); //即使创建，仍有可能失败。。。。            }            header("Cache-Control: public");            header("Content-Description: File Transfer");            header('Content-disposition: attachment; filename=' . basename($filename)); //文件名            header("Content-Type: application/zip"); //zip格式的            header("Content-Transfer-Encoding: binary"); //告诉浏览器，这是二进制文件            header('Content-Length: ' . filesize($filename)); //告诉浏览器，文件大小            @readfile($filename);        }    }    public function getTaskFilePath($task_id, $file_name)    {        $domain_task = new Task();        $task_info = $domain_task->getInfo(array('id' => $task_id));        $project_id = $task_info['project'];        $path = BASE_UPLOAD_PATH . CB . "file/project/{$project_id}/{$task_id}";        return $path . CB . $file_name;    }}