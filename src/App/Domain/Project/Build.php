<?phpnamespace App\Domain\Project;use function App\addTaskLog;use App\Common\CommonDomain;use App\Common\Exception\WrongRequestException;use function App\downloadFile;use function App\getCurrentUser;use App\Model\User\User;use function App\nowTime;use ZipArchive;/** * 项目版本类 * * @author lws */class Build extends CommonDomain{    private static $Model = null;    public function __construct()    {        if (self::$Model == null) {            self::$Model = new \App\Model\Project\Build();        }    }    public function getInfo($where, $field = '*')    {        return self::$Model->getInfo($where, $field);    }    public function addProjectBuild($param, $user_id)    {        if (!is_array($param)) {            $param = get_object_vars($param);        }        $model_project = new \App\Model\Project\Project();        $model_user = new User();        $user_info = $model_user->get($user_id, 'account,realname');        $project_info = $model_project->get($param['project']);        if (!$project_info) {            throw new WrongRequestException('该项目不存在', 1);        }        $param['builder'] = $user_info['account'];        $param['date'] = nowTime();        $param['branch'] = 0;        $param['scmPath'] = '';        $param['filePath'] = '';        $param['stories'] = '';        $param['bugs'] = '';        $param['deleted'] = '0';        if (!$param['id']) {            $id = self::$Model->insert($param);        } else {            $build_id = $param['id'];            $build_info = self::$Model->get($build_id);            if (!$build_info) {                throw new WrongRequestException('该版本不存在', 3);            }            unset($param['id']);            $id = self::$Model->update($build_id, $param);        }        if ($id === false) {            throw new WrongRequestException('发布失败', 4);        }        \App\addProjectLog(" 新版本 {$param['name']}", $param['project'], '发布了');//        \App\addLog("{$user_info['realname']} 发布 {$project_info['name']} 新版本 {$param['name']}");        return $id;    }    /**获取版本列表     * @param $param     * @return array 数据对象     */    public function getList($param)    {        if (!is_array($param)) {            $param = get_object_vars($param);        }        if (isset($param['keyWord'])) {            $param['where']["name LIKE ? or `desc` LIKE ? "] = array("%" . $param['keyWord'] . "%", "%" . $param['keyWord'] . "%");        }        $param['where']['project'] = $param['project_id'];        $param['where']['deleted'] = "0";        $list = self::$Model->getList($param);        if ($list['list']) {            $model_user = new User();//            $model_project = new \App\Model\Project\Project();            foreach ($list['list'] as &$item) {                if ($item) {                    $user = $model_user->getInfo(array('account' => $item['builder']));//                    $project_info = $model_project->getInfo(array('id'=>$item['project']));                    $item['user_info'] = $user;//                    $item['project_info'] = $project_info;                }            }            unset($item);        }        return $list;    }    /** 删除版本     * @param int $id     * @return bool     * @throws WrongRequestException     */    public function delBuild($id)    {        \PhalApi\DI()->notorm->beginTransaction(DB_TICKET);        $build_info = self::$Model->get($id);        if (!$build_info) {            throw new WrongRequestException('该版本不存在', 1);        }        $result = self::$Model->update($id,array('deleted'=>'1'));//        $result = self::$Model->delete($id);        if ($result === false) {            \PhalApi\DI()->notorm->rollback(DB_TICKET);            throw new WrongRequestException('删除失败', 2);        }        \PhalApi\DI()->notorm->commit(DB_TICKET);        return true;    }}